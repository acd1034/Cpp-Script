{
  // https://code.visualstudio.com/docs/editor/userdefinedsnippets
  // generals
  "main": {
    "prefix": "main",
    "body": [
      "#include <iostream>",
      "int main() {",
      "  $0",
      "}",
      ""
    ]
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "struct $1 {",
      "  $0",
      "}; // namespace $1"
    ]
  },
  "namespace": {
    "prefix": "namespace",
    "body": [
      "namespace $1 {",
      "  $0",
      "} // namespace $1"
    ]
  },
  "for": {
    "prefix": "for",
    "body": "for (${1:std::size_t} ${2:i}=0; ${2:i}<${3:length}; ++${2:i}) "
  },
  "forrange": {
    "prefix": "forrange",
    "body": "for (${1:const auto}& ${2:x}:${3:r}) "
  },
  // user-defined
  "cout": {
    "prefix": "cout",
    "body": "std::cout << $0 << std::endl;"
  },
  "temp": {
    "prefix": "temp",
    "body": "template <typename T$0>"
  },
  "lambda": {
    "prefix": "lambda",
    "body": "[](${1:const auto}& ${2:x}){ return $3; }"
  },
  "lambda2": {
    "prefix": "lambda2",
    "body": "[](${1:const auto}& ${2:x}, ${1:const auto}& ${3:y}){ return $4; }"
  },
  "enable": {
    "prefix": "enable",
    "body": "enable_if_t<$1> = nullptr"
  },
  "senable": {
    "prefix": "senable",
    "body": "std::enable_if_t<$1, std::nullptr_t> = nullptr"
  },
  "ADL": {
    "prefix": "ADL",
    "body": "using std::begin, std::end; // for ADL"
  },
  "abbrev": {
    "prefix": "abbrev",
    "body": "noexcept(noexcept(${1:expr}))->decltype((${1:expr})) { return ${1:expr}; }"
  },
  "unused": {
    "prefix": "unused",
    "body": "[[maybe_unused]] friend const virtual explicit ${0:auto}"
  },
  "ranges_os": {
    "prefix": "ranges_os",
    "body": [
      "template <class CharT, class Traits, class R>",
      "auto& operator<<(std::basic_ostream<CharT, Traits>& os, const R& r) {",
      "  const char* dlm = \"\";",
      "  for (const auto& x : r) {",
      "    os << std::exchange(dlm, \" \") << x;",
      "  }",
      "  return os;",
      "}"
    ]
  },
  // doxygen comment
  "hfile": {
    "prefix": "hfile",
    "body": [
      "/// @file $1",
      "#pragma once"
    ]
  },
  "brief": {
    "prefix": "brief",
    "body": [
      "/**",
      " * @brief $0",
      " */"
    ]
  },
  "param": {
    "prefix": "param",
    "body": "@param $1 ensures: "
  },
  "tparam": {
    "prefix": "tparam",
    "body": "@tparam $1 requires: "
  },
  "return": {
    "prefix": "return",
    "body": "@return expects: "
  },
  "undoc": {
    "prefix": "undoc",
    "body": [
      "/// @cond",
      "/// @endcond"
    ]
  },
  "unformat": {
    "prefix": "unformat",
    "body": [
      "// clang-format off",
      "// clang-format on"
    ]
  }
}
